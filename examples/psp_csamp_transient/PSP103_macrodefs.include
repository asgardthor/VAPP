//======================================================================================
//======================================================================================
// Filename: PSP103_macrodefs.include
//======================================================================================
//======================================================================================
//
//  (c) Copyright notice
//
//  Since 2012 until today, PSP has been co-developed by NXP Semiconductors and
//  Delft University of Technology. For this part of the model, each claim undivided
//  ownership and copyrights
//  Until and including 2011, PSP has been co-developed by NXP Semiconductors and
//  Arizona State University. For this part of the model, NXP Semiconductors claims
//  undivided ownership and copyrights.
//
//
//  Version: 103.3.0, December 2013
//
//======================================================================================
//======================================================================================
//
// Further information can be found in the file releasenotesPSP103.txt
//

/////////////////////////////////////////////
//
// Macros and constants used in PSP
//
/////////////////////////////////////////////

// Explicit Gmin
`define GMIN 1E-15

`define PMOS                 -1
`define NMOS                 +1

// Some functions
`define MINA(x,y,a)           0.5*((x)+(y)-sqrt(((x)-(y))*((x)-(y))+(a)))
`define MAXA(x,y,a)           0.5*((x)+(y)+sqrt(((x)-(y))*((x)-(y))+(a)))

`define MNE(x,y,a,mne) \
temp1   =  4.0 - (a); \
temp2   =  (x) + (y); \
mne     =  2.0 / temp1 * (temp2 - sqrt(temp2 * temp2 - temp1 * (x) * (y)));

`define MXE(x,y,a,mxe) \
temp1   =  4.0 - (a); \
temp2   =  (x) + (y); \
mxe     =  2.0 / temp1 * (temp2 + sqrt(temp2 * temp2 - temp1 * (x) * (y)));

// Physical constants
`define QMN                   5.951993
`define QMP                   7.448711

// Other constants (PSP-mos)
`define DELTA1                0.02
`define invSqrt2              7.0710678118654746e-01
`define oneSixth              1.6666666666666667e-01


/////////////////////////////////////////////////////////////////////////////
//
//  Macro definitions.
//
//  Note that because at present locally scoped variables
//  can only be in named blocks, the intermediate variables
//  used in the macros below must be explicitly declared
//  as variables in the main code.
//
/////////////////////////////////////////////////////////////////////////////


//  sigma    function used in surface potential and other calculations
//           (one call uses expressions for arguments so parentheses
//           around the arguments in the expressions are necessary)
`define sigma(a,c,tau,eta,y) \
nu         =  (a) + (c); \
mutau      =  nu * nu + (tau) * (0.5 * ((c) * (c)) - (a)); \
y          =  (eta) + (a) * nu * (tau) / (mutau + (nu / mutau) * (tau) * (tau) * (c) * ((c) * (c) * `oneThird - (a)));

// modified version of sigma, which takes 4 arguments
`define sigma2(a,b,c,tau,eta,y) \
nu = (a) + (c); \
mutau          =  (nu) * (nu) + (tau) * (0.5 * ((c) * (c)) - (a) * (b)); \
y              =  (eta) + (a) * nu * (tau) / (mutau + (nu / mutau) * (tau) * (tau) * (c) * ((c) * (c) * `oneThird - (a) * (b)));

//
//  sp_s     surface potential calculation
//
`define sp_s(sp,xg,xn,delta) \
if (abs(xg) <= margin) begin \
    SP_S_temp1 =  inv_xi * inv_xi * `oneSixth * `invSqrt2; \
    sp         =  xg * inv_xi * (1.0 + xg * (1.0 - (delta)) * Gf * SP_S_temp1); \
end else begin \
    if (xg < -margin) begin \
        SP_S_yg     = -xg; \
        SP_S_ysub   = 1.25 * (SP_S_yg * inv_xi); \
        SP_S_eta    = 0.5 * (SP_S_ysub + 10 - sqrt((SP_S_ysub - 6.0) * (SP_S_ysub - 6.0) + 64.0)); \
        SP_S_temp   = SP_S_yg - SP_S_eta; \
        SP_S_a      = SP_S_temp * SP_S_temp + Gf2*(SP_S_eta + 1.0);\
        SP_S_c      = 2.0 * SP_S_temp - Gf2; \
        SP_S_tau    = -SP_S_eta + ln(SP_S_a * inv_Gf2); \
        `sigma(SP_S_a, SP_S_c, SP_S_tau, SP_S_eta, SP_S_y0) \
        `expl_high(SP_S_y0, SP_S_delta0) \
        SP_S_delta1 = 1.0 / SP_S_delta0; \
        SP_S_temp   = 1.0 / (2.0 + SP_S_y0 * SP_S_y0); \
        SP_S_xi0    = SP_S_y0 * SP_S_y0 * SP_S_temp; \
        SP_S_xi1    = 4.0 * (SP_S_y0 * SP_S_temp * SP_S_temp); \
        SP_S_xi2    = (8.0 * SP_S_temp - 12.0 * SP_S_xi0) * SP_S_temp * SP_S_temp; \
        SP_S_temp   = SP_S_yg - SP_S_y0; \
        SP_S_temp1  = (delta) * SP_S_delta1; \
        SP_S_pC     = 2.0 * SP_S_temp + Gf2 * (SP_S_delta0 - 1.0 - SP_S_temp1 + (delta) * (1.0 - SP_S_xi1)); \
        SP_S_qC     = SP_S_temp * SP_S_temp - Gf2 * (SP_S_delta0 - SP_S_y0 - 1.0 + SP_S_temp1 + (delta) * (SP_S_y0 - 1.0 - SP_S_xi0)); \
        SP_S_temp   = 2.0 - Gf2 * (SP_S_delta0 + SP_S_temp1 - (delta) * SP_S_xi2); \
        SP_S_temp   = SP_S_pC * SP_S_pC - 2.0 * (SP_S_qC * SP_S_temp); \
        sp          = -SP_S_y0 - 2.0 * (SP_S_qC / (SP_S_pC + sqrt(SP_S_temp))); \
    end else begin \
        SP_xg1    = 1.0 / (x1 + Gf * 7.324648775608221e-001); \
        SP_S_A_fac= (xi * x1 * SP_xg1 - 1.0) * SP_xg1; \
        SP_S_xbar = xg * inv_xi * (1.0 + SP_S_A_fac * xg); \
        `expl_low(-SP_S_xbar, SP_S_temp) \
        SP_S_w    = 1.0 - SP_S_temp; \
        SP_S_x1   = xg + Gf2 * 0.5 - Gf * sqrt(xg + Gf2 * 0.25 - SP_S_w); \
        SP_S_bx   = (xn) + 3.0; \
        SP_S_eta  = `MINA(SP_S_x1, SP_S_bx, 5.0) - 0.5 * (SP_S_bx - sqrt(SP_S_bx * SP_S_bx + 5.0)); \
        SP_S_temp = xg - SP_S_eta; \
        SP_S_temp1= exp(-SP_S_eta); \
        SP_S_temp2= 1.0 / (2.0 + SP_S_eta * SP_S_eta); \
        SP_S_xi0  = SP_S_eta * SP_S_eta * SP_S_temp2; \
        SP_S_xi1  = 4.0 * (SP_S_eta * SP_S_temp2 * SP_S_temp2); \
        SP_S_xi2  = (8.0 * SP_S_temp2 - 12.0 * SP_S_xi0) * SP_S_temp2 * SP_S_temp2; \
        SP_S_a    = max(1.0e-40, SP_S_temp * SP_S_temp - Gf2 * (SP_S_temp1 + SP_S_eta - 1.0 - (delta) * (SP_S_eta + 1.0 + SP_S_xi0))); \
        SP_S_b    = 1.0 - 0.5 * (Gf2 * (SP_S_temp1 - (delta) * SP_S_xi2)); \
        SP_S_c    = 2.0 * SP_S_temp + Gf2 * (1.0 - SP_S_temp1 - (delta) * (1.0 + SP_S_xi1)); \
        SP_S_tau  = (xn) - SP_S_eta + ln(SP_S_a / Gf2); \
        `sigma2(SP_S_a, SP_S_b, SP_S_c, SP_S_tau, SP_S_eta, SP_S_x0) \
        if (SP_S_x0 < `se05) begin \
            SP_S_delta0 = exp(SP_S_x0); \
            SP_S_delta1 = 1.0 / SP_S_delta0; \
            SP_S_delta0 = (delta) * SP_S_delta0; \
        end else begin \
            if (SP_S_x0 > (xn) - `se05) begin \
                SP_S_delta0 = exp(SP_S_x0 - (xn)); \
                SP_S_delta1 = (delta) / SP_S_delta0; \
            end else begin \
                SP_S_delta0 = `ke05 / `P3((xn) - SP_S_x0 - `se05); \
                SP_S_delta1 = `ke05 / `P3(SP_S_x0 - `se05); \
            end \
        end \
        SP_S_temp   = 1.0 / (2.0 + SP_S_x0 * SP_S_x0); \
        SP_S_xi0    = SP_S_x0 * SP_S_x0 * SP_S_temp; \
        SP_S_xi1    = 4.0 * (SP_S_x0 * SP_S_temp * SP_S_temp); \
        SP_S_xi2    = (8.0 * SP_S_temp - 12.0 * SP_S_xi0) * SP_S_temp * SP_S_temp; \
        SP_S_temp   = xg - SP_S_x0; \
        SP_S_pC     = 2.0 * SP_S_temp + Gf2 * (1.0 - SP_S_delta1 + SP_S_delta0 - (delta) * (1.0 + SP_S_xi1)); \
        SP_S_qC     = SP_S_temp * SP_S_temp - Gf2 * (SP_S_delta1 + SP_S_x0 - 1.0 + SP_S_delta0 - (delta) * (SP_S_x0 + 1.0 + SP_S_xi0)); \
        SP_S_temp   = 2.0 - Gf2 * (SP_S_delta1 + SP_S_delta0 - (delta) * SP_S_xi2); \
        SP_S_temp   = SP_S_pC * SP_S_pC - 2.0 * (SP_S_qC * SP_S_temp); \
        sp          = SP_S_x0 + 2.0 * (SP_S_qC / (SP_S_pC + sqrt(SP_S_temp))); \
    end \
end

//
//  sp_s_d     surface potential calculation at drain (subset of function sp_s)
//
`define sp_s_d(sp,xg,xn,delta) \
if (abs(xg) <= margin) begin \
    SP_S_temp1 =  inv_xi * inv_xi * `oneSixth * `invSqrt2; \
    sp         =  xg * inv_xi * (1.0 + xg * (1.0 - (delta)) * Gf * SP_S_temp1); \
end else begin \
    SP_S_bx   = (xn) + 3; \
    SP_S_eta  = `MINA(SP_S_x1, SP_S_bx, 5.0) - 0.5 * (SP_S_bx - sqrt(SP_S_bx * SP_S_bx + 5.0)); \
    SP_S_temp = xg - SP_S_eta; \
    SP_S_temp1= exp(-SP_S_eta); \
    SP_S_temp2= 1.0 / (2.0 + SP_S_eta * SP_S_eta); \
    SP_S_xi0  = SP_S_eta * SP_S_eta * SP_S_temp2; \
    SP_S_xi1  = 4.0 * (SP_S_eta * SP_S_temp2 * SP_S_temp2); \
    SP_S_xi2  = (8.0 * SP_S_temp2 - 12.0 * SP_S_xi0) * SP_S_temp2 * SP_S_temp2; \
    SP_S_a    = max(1.0e-40, SP_S_temp * SP_S_temp - Gf2 * (SP_S_temp1 + SP_S_eta - 1.0 - (delta) * (SP_S_eta + 1.0 + SP_S_xi0))); \
    SP_S_b    = 1.0 - 0.5 * (Gf2 * (SP_S_temp1 - (delta) * SP_S_xi2)); \
    SP_S_c    = 2.0 * SP_S_temp + Gf2 * (1.0 - SP_S_temp1 - (delta) * (1.0 + SP_S_xi1)); \
    SP_S_tau  = (xn) - SP_S_eta + ln(SP_S_a / Gf2); \
    `sigma2(SP_S_a, SP_S_b, SP_S_c, SP_S_tau, SP_S_eta, SP_S_x0) \
    if (SP_S_x0 < `se05) begin \
        SP_S_delta0 = exp(SP_S_x0); \
        SP_S_delta1 = 1.0 / SP_S_delta0; \
        SP_S_delta0 = (delta) * SP_S_delta0; \
    end else begin \
        if (SP_S_x0 > (xn) - `se05) begin \
            SP_S_delta0 = exp(SP_S_x0 - (xn)); \
            SP_S_delta1 = (delta) / SP_S_delta0; \
        end else begin \
            SP_S_delta0 = `ke05 / `P3((xn) - SP_S_x0 - `se05); \
            SP_S_delta1 = `ke05 / `P3(SP_S_x0 - `se05); \
        end \
    end \
    SP_S_temp   = 1.0 / (2.0 + SP_S_x0 * SP_S_x0); \
    SP_S_xi0    = SP_S_x0 * SP_S_x0 * SP_S_temp; \
    SP_S_xi1    = 4.0 * (SP_S_x0 * SP_S_temp * SP_S_temp); \
    SP_S_xi2    = (8.0 * SP_S_temp-12.0 * SP_S_xi0) * SP_S_temp * SP_S_temp; \
    SP_S_temp   = xg - SP_S_x0; \
    SP_S_pC     = 2.0 * SP_S_temp + Gf2 * (1.0 - SP_S_delta1 + SP_S_delta0 - (delta) * (1.0 + SP_S_xi1)); \
    SP_S_qC     = SP_S_temp * SP_S_temp - Gf2 * (SP_S_delta1 + SP_S_x0 - 1.0 + SP_S_delta0 - (delta) * (SP_S_x0 + 1.0 + SP_S_xi0)); \
    SP_S_temp   = 2.0 - Gf2*(SP_S_delta1+SP_S_delta0-(delta)*SP_S_xi2); \
    SP_S_temp   = SP_S_pC * SP_S_pC - 2.0 * (SP_S_qC * SP_S_temp); \
    sp          = SP_S_x0 + 2.0 * (SP_S_qC / (SP_S_pC + sqrt(SP_S_temp)));\
end

//
//  sp_ovInit    surface potential calculation for the overlap regions initialization
//
`define sp_ovInit(GOV, GOV2, SP_OV_eps2, SP_OV_a, SP_OV_delta1) \
inv_GOV     =  1.0 / GOV; \
SP_OV_eps   =  3.1 * GOV + 8.5; \
SP_OV_eps2  =  SP_OV_eps * SP_OV_eps; \
SP_OV_delta =  0.5 * SP_OV_eps; \
if (inv_GOV < 0.06) begin \
    SP_OV_a     =  64.0 * inv_GOV; \
end else begin \
    if (inv_GOV <= 0.45) begin \
        SP_OV_a     =  22.0 * inv_GOV + 3.0; \
    end else begin \
        if (inv_GOV <= 1.6) begin \
            SP_OV_a     = -7.2 * inv_GOV + 15.5; \
        end else begin \
            SP_OV_a     = GOV; \
        end \
    end \
end \
SP_OV_delta1 = SP_OV_delta + GOV2 * 0.5 - GOV * sqrt(SP_OV_delta + GOV2 * 0.25 + SP_OV_a);


// This macro is used for parasitic resistances.
// If R=0, the Verilog-A compiler should recognize
// that the corresponding nodes can be collapsed
`define CollapsableR(G, R, SN, N1, N2, Rname) \
if ((R) > 0.0) begin \
   I(N1, N2) <+ MULT_i * (G) * V(N1, N2); \
   /* line below can be removed if compiler issue occurs */ \
   I(N1, N2) <+ white_noise(MULT_i * SN, Rname); \
end else begin \
   V(N1, N2) <+ 0.0; \
end


`define SPcalcLocalVarDecl \
real phib, G_0, Vsbstar, Vsbx; \
real xg, qeff, qeff1, Voxm, alpha, dps, qim, qim1, GdL, H, eta_p, s1; \
real Gvsat, Gvsatinv, Gmob_dL, x_ds, x_m; \
 \
real Dnsub; \
real x_s, sqm, alpha1, phi_inf, za, xitsb, rhob; \
real thesat1, wsat, ysat, zsat, dL, GR, Gmob; \
real xgm, Ux; \
real xn_s, delta_ns; \
real Gf, Gf2, inv_Gf2, xi, inv_xi, margin; \
 \
real SP_xg1, SP_S_temp,SP_S_temp1,SP_S_temp2; \
real SP_S_yg, SP_S_ysub, SP_S_y0, SP_S_a, SP_S_b, SP_S_c; \
real SP_S_bx, SP_S_tau, SP_S_eta, SP_S_delta0, SP_S_delta1; \
real SP_S_pC, SP_S_qC, SP_S_A_fac; \
real SP_S_x1, SP_S_w, SP_S_xbar, SP_S_x0; \
real SP_S_xi0, SP_S_xi1, SP_S_xi2; \
 \
real x_d, Rxcor, delta_1s, xi0s, xi1s, xi2s, xi0d; \
real Es, Em, Ed, Ds, Dm, Dd, Ps, xgs, qis, qbs, qbm, Eeffm; \
real Phi_0, Phi_2, asat, Phi_0_2, Phi0_Phi2; \
real Vdse, Udse, xn_d, k_ds; \
real Mutmp, Phi_sat, delta_nd; \
real pC, qC, Pm; \
real d0, D_bar, km, x_pm, xi_pd, p_pd, u_pd, q_pd;

`define TempInit1 \
TKD_sq     =  TKD * TKD; \
delT       =  TKD - TKR; \
rTn        =  TKR / TKD; \
ln_rTn     =  ln(rTn); \
phit       =  TKD * `KBOL / `QELE; \
inv_phit   =  1.0 / phit; \
Eg         =  1.179 - 9.025e-5 * TKD - 3.05e-7 * TKD_sq; \
phibFac    =  (1.045 + 4.5e-4 * TKD) * (0.523 + 1.4e-3 * TKD - 1.48e-6 * TKD_sq) * TKD_sq / 9.0E4; \
phibFac    =  `MAX(phibFac, 1.0E-3); \
 \
/* parameter for white noise of parasitic resistances */ \
nt0        =  4 * `KBOL * TKD;

`define TempInit2 \
phit1      =  phit * (1.0 + CT_i * rTn); \
inv_phit1  =  1.0 / phit1; \
 \
phib_dc    =  Eg + DPHIB_i + 2.0 * phit * ln(NEFF_i * pow(phibFac, -0.75) * 4.0e-26); \
phib_dc    =  `MAX(phib_dc, 5.0E-2); \
G_0_dc     =  sqrt(2.0 * `QELE * NEFF_i * EPSSI * inv_phit) / CoxPrime; \
 \
/* Poly-silicon depletion */ \
kp         =  0.0; \
np         =  0.0; \
if (NP_i > 0.0) begin \
    arg2max    =  8.0e7 / tox_sq; \
    np         = `MAX(NP_i, arg2max); \
    np         = `MAX(5.0e24, np); \
    kp         =  2.0 * CoxPrime * CoxPrime * phit / (`QELE * np * EPSSI); \
end \
 \
/* QM corrections */ \
qlim2      =  100.0 * phit * phit; \
qq         =  0.0; \
if (QMC_i > 0.0) begin \
    qq         =  0.4 * `QMN * QMC_i * pow(CoxPrime, `twoThirds); \
    if (CHNL_TYPE==`PMOS) begin \
        qq         =  `QMP / `QMN * qq; \
    end \
    qb0        =  sqrt(phit * G_0_dc * G_0_dc * phib_dc); \
    dphibq     =  0.75 * qq * pow(qb0, `twoThirds); \
    phib_dc       =  phib_dc + dphibq; \
    G_0_dc        =  G_0_dc * (1.0 + 2.0 * `twoThirds * dphibq / qb0); \
end \
sqrt_phib_dc =  sqrt(phib_dc); \
phix_dc      =  0.95 * phib_dc; \
aphi_dc      =  0.0025 * phib_dc * phib_dc; \
bphi_dc      =  aphi_dc; \
phix2        =  0.5 * sqrt(bphi_dc); \
phix1_dc     =  `MINA(phix_dc - phix2, 0, aphi_dc); \
alpha_b      =  0.5 * (phib_dc + Eg); \
Dch          =  GCO_i * phit1; \
us1          =  sqrt(VSBNUD_i + phib_dc) - sqrt_phib_dc; \
us21         =  sqrt(VSBNUD_i + DVSBNUD_i + phib_dc) - sqrt_phib_dc - us1;

`define TempInit3 \
/* Additional variables for separate surface potential calculation for CV */ \
phib_ac    =  Eg + DPHIB_i + DELVTAC_i + 2.0 * phit * ln(NEFFAC_i * pow(phibFac, -0.75) * 4.0e-26); \
phib_ac    =  `MAX(phib_ac, 5.0E-2); \
G_0_ac     =  sqrt(2.0 * `QELE * NEFFAC_i * EPSSI * inv_phit) / CoxPrime; \
 \
if (QMC_i > 0.0) begin \
    qb0        =  sqrt(phit * G_0_ac * G_0_ac * phib_ac); \
    dphibq     =  0.75 * qq * pow(qb0, `twoThirds); \
    phib_ac    =  phib_ac + dphibq; \
    G_0_ac     =  G_0_ac * (1.0 + 2.0 * `twoThirds * dphibq / qb0); \
end \
 \
phix_ac    =  0.95 * phib_ac; \
aphi_ac    =  0.0025 * phib_ac * phib_ac; \
bphi_ac    =  aphi_ac; \
phix2      =  0.5 * sqrt(bphi_ac); \
phix1_ac   =  `MINA(phix_ac - phix2, 0, aphi_ac);

`define TempScaling \
/* Temperature scaling of parameters*/ \
VFB_T      =  VFB_i + STVFB_i * delT + DELVTO_i; \
 \
/* Mobility parameters */ \
tf_bet     =  exp(STBET_i * ln_rTn); \
BETN_T     =  BETN_i * tf_bet; \
BET_i      =  FACTUO_i * BETN_T * CoxPrime; \
THEMU_T    =  THEMU_i * exp(STTHEMU_i * ln_rTn); \
tf_mue     =  exp(STMUE_i * ln_rTn); \
MUE_T      =  MUE_i * tf_mue; \
tf_cs      =  exp(STCS_i * ln_rTn); \
CS_T       =  CS_i * tf_cs; \
tf_xcor    =  exp(STXCOR_i * ln_rTn); \
XCOR_T     =  XCOR_i * tf_xcor; \
 \
/* Series resistance */ \
tf_ther    =  exp(STRS_i * ln_rTn); \
RS_T       =  RS_i * tf_ther; \
THER_i     =  2 * BET_i * RS_T; \
 \
/* Velocity saturation */ \
tf_thesat  =  exp(STTHESAT_i * ln_rTn); \
THESAT_T   =  THESAT_i * tf_thesat; \
Vdsat_lim  =  3.912023005 * phit1; \
 \
/* Impact ionization */ \
A2_T       =  A2_i * exp(-STA2_i * ln_rTn); \
 \
/* Noise */ \
nt         =  FNT_i * 4 * `KBOL * TKD; \
Sfl_prefac =  phit * phit * BET_i / Cox_over_q;

