
//
//  r3Macros.va
//
//  Version: 2.0.0, October 30, 2014
//
//  This software is distributed as is, completely without warranty or service
//  support. Freescale Semiconductor, Inc., and its employees are not liable
//  for the condition or performance of the software.
//  Freescale Semiconductor, Inc., owns the copyright and grants users a perpetual,
//  irrevocable, worldwide, non-exclusive, royalty-free license with respect to the
//  software as set forth below.
//  Freescale Semiconductor, Inc., hereby disclaims all implied warranties.
//  Freescale Semiconductor, Inc., grants the users the right to modify, copy,
//  and redistribute the software and documentation, both within the user's
//  organization and externally, subject to the following restrictions
//  1. The users agree not to charge for the Freescale Semiconductor, Inc., code
//     itself but may charge for additions, extensions, or support.
//  2. In any product based on the software, the users agree to acknowledge
//     that Freescale Semiconductor, Inc., developed the software. This
//     acknowledgment shall appear in the product documentation.
//  3. The users agree to obey all government restrictions governing redistribution
//     or export of the software.
//  4. The users agree to reproduce any copyright notice which appears on the software and
//     documentation on any copy or modification of such made available to others.
//
//  (c) Copyright 2014, Freescale Semiconductor, Inc.
//

//
//  This macro is the core r3 calculation for current in the main body of the resistor/JFET
//
//  Outputs:
//    Ib         current through the body of the resistor/JFET
//    geff       effective DC conductance (used in noise calculation)
//  Inputs:
//    Vb         voltage across the resistor/JFET body
//    Vc1        voltage from control to terminal 1 nodes
//    Vc2        voltage from control to terminal 2 nodes
//    vpo        pinch-off voltage: 0.5/(df*df)-dp*0.5
//    vpoe       effective pinch-off voltage (vpo less offset for grpo limiting)
//    V1cx       threshold to switch simple Vsat calculation form for iecrit=0
//    nsteff     full pinch-off slope parameter
//    phi_t0     thermal voltage at circuit ambient (without self-heating)
//    dp         depletion pinching potential
//    df         depletion pinching factor
//    dfsq       df*df (precomputed as it is used several times)
//    lde        (effective length)*delta_field for velocity saturation
//    leffE_um   effective length for velocity saturation calculation, in micron
//    ecrneff    effective corner field for velocity saturation
//    iecrit     inverse of the velocity saturation critical field
//    dufctr     du factor, precomputed
//    uoff       du offset, precomputed
//    ats        pinch-off smoothing parameter
//    atspo      ats limit in pinch-off or 4*ats*ats (for swaccpo=1/2 or 0, respectively)
//    gf         conductance factor
//    grpo       minimum conductance ratio in pinch-off
//    swaccpo    switch for accurate pinch-off calculation (0=no 1/2=yes)
//    blockName  name for the begin/end block (must be unique)
//
//  Some of the above arguments are, to reduce model evaluation time,
//  pre-computed quantities.
//
//  Most of the calculations below are to solve a quartic equation for Vsat
//  that gives a value the guarantees that the output conductance (without
//  self-heating) will not become negative, Vsat equal to or (just) less than
//  the Vb voltage at which d(Ib)/d(Vb) is zero. The appropriate real root of
//  the equation is calculated. Note that always bb<0, rp>0, arg1>0, so some
//  conditional calculation branches below should never be followed. rm can change
//  sign, which leads to a numerical problem in evaluation of the derivative of
//  pow(rm,`oneThird) for rm near zero. Hence the linearization of this function
//  for abs(rm)<1.0e-6. The derivative of bvar2 w.r.t. rm is not continuous when
//  abs(rm)=1.0e-6, but the effect on Ib and gm is embedded in many calculations
//  and is negligible.
//
//  Terminology: 
//  non-pinch-off    is when neither source nor drain are in pinch-off (i.e. JFET on "nonsaturation")
//  drain pinch-off  is when the drain is pinched off but the source is not (i.e. JFET on "saturation")
//  full pinch-off   is when both the source and drain are in pinch-off (i.e. JFET "subthreshold")
//
//  There are 3 options for limiting behavior in full pinch-off:
//  sw_accpo=0  no special handling of full pinch-off, the model does not well
//              approximate 1-exp(-Vb/phi_t0) behavior; this has the fastest
//              computation time and is appropriate for resistor modeling
//              (setting ats to 1.1*phi_t0 makes full pinch-off modeling reasonable,
//              setting ats to less than that value makes saturation happen too early,
//              setting ats to more than that value makes saturation happen too late)
//  sw_accpo=1  this makes the model approximate 1-exp(-Vb/phi_t0) behavior in
//              full pinch-off significantly more accurately than sw_accpo=0; it takes
//              more computation time than sw_accpo=0 but is more accurate for JFETs
//  sw_accpo=2  this also makes the model approximate 1-exp(-Vb/phi_t0) behavior
//              in full pinch-off significantly more accurately than sw_accpo=0;
//              it is slightly less accurate than sw_accpo=1 in full pinch-off but
//              slightly more accurate through the transition to full pinch-off,
//              i.e. around "threshold" compared to sw_accpo=1; the transition from
//              non-pinch-off to drain pinch-off is smoother, and higher order
//              continuity is maintained through Vb=0; the cost is a small increase
//              in computational complexity cf. sw_accpo=1
//
//  NOTE: some compilers have not yet implemented the IEEE std 1364-2005
//        Verilog HDL style calls for mathematical functions; this is why
//         ln(),  log()  ,  exp(),  sqrt(),  pow(), etc. are used instead of
//        $ln(), $log10(), $exp(), $sqrt(), $pow(), etc.
//        (the second forms are those "encouraged" to be used since LRM2.3)
//

`define r3Ibody(Ib,geff,Vb,Vc1,Vc2,vpo,vpoe,V1cx,nsteff,phi_t0,dp,df,dfsq,lde,leffE_um,ecrneff,iecrit,dufctr,uoff,ats,atspo,gf,grpo,dibl1,dibl2,dibl2v,dibl2e,dibl2o,clm1,clm2,clm2v,clm2e,clm2o,swaccpo,blockName) \
begin : blockName \
    real sdFlip, V1ci, Vbi, V1cl, V1c, dpe; \
    real a0, a11, a22, a3, a4, dvar, cvar, bvar, avar, asq, pvar, qvar, rvar; \
    real aa, bb, aa3d27, dd, sd, rp, rm, avar2, bvar2, yvar, val1, val2, arg1, arg2; \
    real dore, Vsat, Vbeff, fctrm, fctrp, sqrtp, sqrtm, rmu, dpfctr, atseff, fouratsq; \
    real Vsatphi, Fsatphi, drmu, dfe, dpee, tmp; \
    if (Vb<0.0) begin \
        sdFlip   = -1.0; \
        V1ci     = -Vc2; \
        Vbi      = -Vb; \
    end else begin \
        sdFlip   =  1.0; \
        V1ci     = -Vc1; \
        Vbi      =  Vb; \
    end \
    if (dibl1>0.0) begin \
        V1ci     =  V1ci-dibl1*Vbi; \
    end \
    if (dibl2>0.0) begin \
        V1ci     =  V1ci-dibl2*(pow((Vbi+dibl2v),dibl2e)-dibl2o); \
    end \
    if (V1ci>vpoe) begin \
        V1cl     =  vpoe-nsteff*ln(1.0+exp((vpoe-V1ci)/nsteff)); \
    end else begin \
        V1cl     =  V1ci-nsteff*ln(1.0+exp((V1ci-vpoe)/nsteff)); \
    end \
    if (V1cl<(-0.4*(dp+`MIN(Vbi,vpoe-V1cl)))) begin \
        V1c      = -0.4*(dp+`MIN(Vbi,vpoe-V1cl)); \
    end else begin \
        V1c      =  V1cl; \
    end \
    dpe      =  dp+2.0*V1c; \
    if (iecrit>0.0) begin \
        a0       =  dfsq*dpe*dpe-dpe; \
        a11       = -1.0+3.0*dfsq*dpe; \
        a22       =  dfsq*(9.0/4.0+dpe/lde); \
        a3       =  1.5*dfsq/lde; \
        a4       =  4.0*lde*lde/dfsq; \
        dvar     =  a0*a4; \
        cvar     =  a11*a4; \
        bvar     =  a22*a4; \
        avar     =  a3*a4; \
        asq      =  avar*avar; \
        pvar     = -bvar; \
        qvar     =  avar*cvar-4.0*dvar; \
        rvar     =  4.0*bvar*dvar-cvar*cvar-dvar*asq; \
        aa       =  qvar-pvar*pvar*`oneThird; \
        bb       =  rvar-pvar*(qvar+2.0*aa)/9.0; \
        aa3d27   =  aa*aa*aa/27.0; \
        dd       =  0.25*bb*bb+aa3d27; \
        sd       =  sqrt(dd); \
        if (bb<0.0) begin \
            rp       = -0.5*bb+sd; \
            rm       = -aa3d27/rp; \
        end else begin \
            rm       = -0.5*bb-sd; \
            rp       = -aa3d27/rm; \
        end \
        if (rp>(0.000001)) begin \
            avar2    =  pow(rp,`oneThird); \
        end else if (rp<(-0.000001)) begin \
            avar2    = -pow((-rp),`oneThird); \
        end else begin \
            avar2    =  10000.0*rp; \
        end \
        if (rm>(0.000001)) begin \
            bvar2    =  pow(rm,`oneThird); \
        end else if (rm<(-0.000001)) begin \
            bvar2    = -pow((-rm),`oneThird); \
        end else begin \
            bvar2    =  10000.0*rm; \
        end \
        yvar     =  avar2+bvar2-pvar*`oneThird; \
        rvar     =  sqrt(0.25*asq-bvar+yvar); \
        val1     =  0.75*asq-rvar*rvar-2.0*bvar; \
        val2     =  (avar*bvar-2.0*cvar-0.25*asq*avar)/rvar; \
        arg1     =  val1+val2; \
        if (arg1>0.0) begin \
            dore     =  sqrt(arg1); \
            Vsat     = -0.25*avar+0.5*(dore+rvar); \
        end else begin \
            arg2     =  val1-val2; \
            dore     =  sqrt(sqrt(arg2*arg2+1.0e-4)); \
            Vsat     = -0.25*avar+0.5*(dore-rvar); \
        end \
    end else begin \
        if (V1c>V1cx) begin \
            tmp      =  dfsq*(vpo-V1c); \
            Vsat     =  2.0*(1.0-2.0*tmp)*(vpo-V1c)/(1.0-3.0*tmp+sqrt(1.0-1.5*tmp)); \
        end else begin \
            tmp      =  3.0*dfsq*dpe; \
            Vsat     =  (1.0-tmp+sqrt(1.0+tmp))/(4.5*dfsq); \
        end \
    end \
    if (swaccpo) begin \
        Vsatphi  =  Vsat+phi_t0; \
        Fsatphi  =  df*sqrt(dpe+Vsat); \
        if (iecrit>0.0) begin \
            fctrm    =  0.5*((Vsatphi/leffE_um)-ecrneff)*iecrit; \
            fctrp    =  0.5*((Vsatphi/leffE_um)+ecrneff)*iecrit; \
            sqrtm    =  sqrt(fctrm*fctrm+dufctr); \
            sqrtp    =  sqrt(fctrp*fctrp+dufctr); \
            rmu      =  sqrtm+sqrtp-uoff; \
            drmu     =  0.5*((fctrm/sqrtm)+(fctrp/sqrtp))*iecrit/leffE_um; \
            dfe      =  sqrt(2.0*Fsatphi*(1.0-Fsatphi)*(1.0-drmu*Vsatphi/(1.0+rmu))/Vsatphi); \
        end else begin \
            dfe      =  sqrt(2.0*Fsatphi*(1.0-Fsatphi)/Vsatphi); \
        end \
        dpee     =  dfsq*(dpe+Vsat)/(dfe*dfe)-Vsatphi; \
        atseff   =  atspo+ats*Vsat/(ats+Vsatphi); \
        fouratsq =  4.0*atseff*atseff; \
        Vbeff    =  2.0*Vbi*Vsatphi/(sqrt((Vbi-Vsatphi)*(Vbi-Vsatphi)+fouratsq)+sqrt((Vbi+Vsatphi)*(Vbi+Vsatphi)+fouratsq)); \
        if (sw_accpo>1) begin \
            atseff   =  atspo+ats*Vbeff/(ats+Vsatphi); \
            fouratsq =  4.0*atseff*atseff; \
            Vbeff    =  2.0*Vbi*Vsatphi/(sqrt((Vbi-Vsatphi)*(Vbi-Vsatphi)+fouratsq)+sqrt((Vbi+Vsatphi)*(Vbi+Vsatphi)+fouratsq)); \
        end \
        dpfctr   =  1.0-dfe*sqrt(dpee+Vbeff); \
        if (iecrit>0.0) begin \
            fctrm    =  0.5*((Vbeff/leffE_um)-ecrneff)*iecrit; \
            fctrp    =  0.5*((Vbeff/leffE_um)+ecrneff)*iecrit; \
            sqrtm    =  sqrt(fctrm*fctrm+dufctr); \
            sqrtp    =  sqrt(fctrp*fctrp+dufctr); \
            rmu      =  sqrtm+sqrtp-uoff; \
        end else begin \
            rmu      =  0.0; \
        end \
    end else begin \
        Vbeff    =  2.0*Vbi*Vsat/(sqrt((Vbi-Vsat)*(Vbi-Vsat)+atspo)+sqrt((Vbi+Vsat)*(Vbi+Vsat)+atspo)); \
        if (iecrit>0.0) begin \
            fctrm    =  0.5*((Vbeff/leffE_um)-ecrneff)*iecrit; \
            fctrp    =  0.5*((Vbeff/leffE_um)+ecrneff)*iecrit; \
            sqrtm    =  sqrt(fctrm*fctrm+dufctr); \
            sqrtp    =  sqrt(fctrp*fctrp+dufctr); \
            rmu      =  sqrtm+sqrtp-uoff; \
        end else begin \
            rmu      =  0.0; \
        end \
        dpfctr   =  1.0-df*sqrt(dpe+Vbeff); \
    end \
    if (dpfctr<grpo) begin \
        dpfctr   =  grpo; \
    end \
    geff     =  gf*dpfctr/(1.0+rmu); \
    Ib       =  sdFlip*geff*Vbeff; \
    if (clm1>0.0) begin \
        Ib       =  Ib*(1.0+clm1*(1.0+clm1c*(vpoe-V1cl))*Vbi); \
    end \
    if (clm2>0.0) begin \
        Ib       =  Ib*(1.0+clm2*(pow((Vbi+clm2v),clm2e)-clm2o)); \
    end \
end
